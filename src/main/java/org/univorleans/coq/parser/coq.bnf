{
    parserClass = "org.univorleans.coq.parser.CoqParser"

    extends = "com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Coq"
    psiImplClassSuffix="Impl"
    psiPackage="org.univorleans.coq.psi"
    psiImplPackage="org.univorleans.coq.psi.impl"

    elementTypeHolderClass="org.univorleans.coq.psi.CoqTypes"
    elementTypeClass="org.univorleans.coq.psi.CoqElementType"
    tokenTypeClass="org.univorleans.coq.psi.CoqTokenType"

    psiImplUtilClass="org.univorleans.coq.psi.impl.CoqPsiImplUtil"
}

coqFile ::= phrase*

// file
////////////////////////////////////////////

private phrase ::=
| section
| module
| commentary
| documentation
| def_general
| proof

// phrases
////////////////////////////////////////////

section ::= sectionenter phrase* sectionexit

module ::=  moduleenter phrase* moduleexit

def_general ::=
    | definition
    | fixpoint
    | cofixpoint
    | inductive
    | assertion
    | formulae+ DOT

proof ::= proofenter proofphrase* proofexit

commentary ::= COMOPEN (commentany | DOT)* (commentary (commentany | DOT)*)? COMCLOSE

documentation ::= DOCOPEN (commentany | DOT)* (commentary (commentany | DOT)*)? COMCLOSE

// section
////////////////////////////////////////////

sectionenter ::= SECTIONSTART ID (formulae)* DOT

sectionexit ::= SECTIONEND ID DOT

// module
////////////////////////////////////////////

moduleenter ::= MODULESTART ID (formulae)* DOT

moduleexit ::= SECTIONEND ID DOT

// Definitions
////////////////////////////////////////////

definition ::= DEFINITION_KW ID formulae* DOT

fixpoint ::= FIXPOINT_KW (ind_body (WITH ind_body)* DOT | formulae+ DOT)

inductive ::= INDUCTIVE_KW (ind_body (WITH ind_body)* DOT | formulae+ DOT)

ind_body ::= ID noWith

cofixpoint ::= COFIXPOINT_KW formulae+ DOT

assertion ::= assertion_keyword ID formulae* DOT

private assertion_keyword ::=
    | THEOREM_KW | LEMMA_KW
    | REMARK_KW | FACT_KW
    | COROLLARY_KW | PROPOSITION_KW
    | EXAMPLE_KW | HYPOTHESIS_KW | AXIOM_KW

// Proofs
////////////////////////////////////////////

proofenter ::= PROOF_KW DOT

proofexit ::= (QED | DEFINED | ADMITTED) DOT

proofphrase ::= BULLET? (brackets | (formulae* DOT)) | phrase

brackets ::= LBRACK proofphrase* RBRACK


// Must not contain END nor DOT
//anytowith

noWith ::= noMatch* MATCH noWith WITH noWith END | noMatch*

noMatch ::=
| forallqt | existsqt
| BULLET | LBRACK noMatch* RBRACK
| common

// Commentaries
commentany ::=
| MATCH | END | WITH | BULLET
| LBRACK | RBRACK | FORALL | EXISTS
| common

formulae ::=
    | forallqt
    | existsqt
    | commentary
    | documentation
    | MATCH formulae* END
    | WITH | BULLET
    | LBRACK formulae* RBRACK
    | common

forallqt ::= FORALL formulae*

existsqt ::= EXISTS formulae*

common ::=
| ID | NUMBER
| DEFINITION_KW | FIXPOINT_KW | INDUCTIVE_KW | COFIXPOINT_KW | assertion_keyword
| KEYWORD | COMMAND| TACTIC
| LPAR | RPAR | LSQBRACK | RSQBRACK
| BIGARROW
| COMMA | BIGARROW | ARROW | COLON | SEMICOLON
| BULLET | FDOT | ANYBUTDOT









